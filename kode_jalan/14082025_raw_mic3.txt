// mic3_raw_logger.c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/i2s.h"
#include "esp_timer.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "nvs.h"

// ---------------- CONFIG ----------------
#define N_EVENTS        100
#define SAMPLE_RATE     96000
#define I2S_READ_LEN    1024
#define I2S_PORT        I2S_NUM_0
#define MIC3_SCK        26
#define MIC3_WS         25
#define MIC3_SD         22

static const char *TAG = "mic3_raw";
static int32_t i2s_buf[I2S_READ_LEN];

// ---- I2S init ----
void init_i2s_mic3() {
    i2s_config_t cfg = {
        .mode = I2S_MODE_MASTER | I2S_MODE_RX,
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        .communication_format = I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 4,
        .dma_buf_len = 64,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };
    i2s_driver_install(I2S_PORT, &cfg, 0, NULL);

    i2s_pin_config_t pins = {
        .bck_io_num = MIC3_SCK,
        .ws_io_num = MIC3_WS,
        .data_out_num = I2S_PIN_NO_CHANGE,
        .data_in_num = MIC3_SD,
        .mck_io_num = I2S_PIN_NO_CHANGE
    };
    i2s_set_pin(I2S_PORT, &pins);
    i2s_zero_dma_buffer(I2S_PORT);

    ESP_LOGI(TAG, "I2S initialized (SR=%d, frame=%d)", SAMPLE_RATE, I2S_READ_LEN);
}

// ---- compute STE, ZCR, PEAK ----
void compute_ste_zcr_peak(int32_t *buf, int len, float *ste_out, float *zcr_out, int *peak_out) {
    double ste = 0.0;
    int zcr = 0, last_sign = 0, peak = 0;

    for (int i = 0; i < len; ++i) {
        int16_t sample = buf[i] >> 14;  // downscale ke 16-bit
        ste += (double)sample * (double)sample;
        int sign = (sample >= 0) ? 1 : -1;
        if (i > 0 && sign != last_sign) zcr++;
        last_sign = sign;
        int amp = abs(sample);
        if (amp > peak) peak = amp;
    }

    *ste_out = (float)(ste / len);
    *zcr_out = (float)zcr / len;
    *peak_out = peak;
}

// ---- Main Task ----
void mic3_task(void *arg) {
    while (1) {
        size_t bytes;
        float ste, zcr; 
        int peak;

        // Baca data dari mic
        i2s_read(I2S_PORT, i2s_buf, sizeof(i2s_buf), &bytes, portMAX_DELAY);

        // Hitung nilai STE, ZCR, PEAK
        compute_ste_zcr_peak(i2s_buf, I2S_READ_LEN, &ste, &zcr, &peak);

        // Ambil timestamp (mikrodetik sejak boot)
        int64_t now_us = esp_timer_get_time();

        // Tampilkan log raw
        ESP_LOGI(TAG, "TIME=%lld us | STE=%.2f | PEAK=%d | ZCR=%.4f", 
                 now_us, ste, peak, zcr);
    }
}

// ---- app_main ----
void app_main(void) {
    nvs_flash_init();
    init_i2s_mic3();
    xTaskCreatePinnedToCore(mic3_task, "mic3_task", 8192, NULL, 5, NULL, 1);
}
