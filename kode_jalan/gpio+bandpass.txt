#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/i2s.h"
#include "esp_timer.h"
#include "driver/gpio.h"
#include "soc/gpio_sig_map.h"
#include "hal/gpio_hal.h"

// === Konfigurasi Umum ===
#define SAMPLE_RATE     96000
#define I2S_READ_LEN    1024

// === I2S Pin Mic1 / Mic3 (I2S_NUM_0) ===
#define MIC13_WS        25
#define MIC13_SCK       26
#define MIC1_SD         22
#define MIC3_SD         32

// === I2S Pin Mic2 (I2S_NUM_1) ===
#define MIC2_WS         27
#define MIC2_SCK        14
#define MIC2_SD         33

int32_t mic1_buf[I2S_READ_LEN], mic2_buf[I2S_READ_LEN], mic3_buf[I2S_READ_LEN];
volatile int peak1 = 0, peak2 = 0, peak3 = 0;
volatile uint64_t ts1 = 0, ts2 = 0, ts3 = 0;

// === FIR FILTER SETUP ===
#define FIR_TAP_NUM 51
float fir_coeffs[FIR_TAP_NUM] = {
    -0.0010, -0.0011, -0.0012, -0.0011, -0.0006,
     0.0003,  0.0015,  0.0029,  0.0040,  0.0045,
     0.0041,  0.0028,  0.0007, -0.0016, -0.0038,
    -0.0054, -0.0060, -0.0053, -0.0033, -0.0003,
     0.0033,  0.0065,  0.0091,  0.0105,  0.0103,
     0.0086,  0.0059,  0.0027, -0.0006, -0.0036,
    -0.0058, -0.0068, -0.0064, -0.0047, -0.0022,
     0.0008,  0.0036,  0.0057,  0.0068,  0.0066,
     0.0051,  0.0027, -0.0003, -0.0032, -0.0054,
    -0.0064, -0.0060, -0.0041, -0.0009,  0.0028
};

float fir_buf1[FIR_TAP_NUM] = {0}, fir_buf2[FIR_TAP_NUM] = {0}, fir_buf3[FIR_TAP_NUM] = {0};
int fir_idx1 = 0, fir_idx2 = 0, fir_idx3 = 0;

float apply_fir(float sample, float* buf, int* idx) {
    buf[*idx] = sample;
    float y = 0;
    int i_idx = *idx;
    for (int i = 0; i < FIR_TAP_NUM; i++) {
        y += fir_coeffs[i] * buf[i_idx];
        i_idx = (i_idx == 0) ? (FIR_TAP_NUM - 1) : (i_idx - 1);
    }
    *idx = (*idx + 1) % FIR_TAP_NUM;
    return y;
}

// === I2S Setup ===
void init_i2s(i2s_port_t port, int bck, int ws, int din) {
    i2s_config_t config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_RX,
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        .communication_format = I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 4,
        .dma_buf_len = 64,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };
    i2s_driver_install(port, &config, 0, NULL);

    i2s_pin_config_t pin_config = {
        .bck_io_num = bck,
        .ws_io_num = ws,
        .data_out_num = I2S_PIN_NO_CHANGE,
        .data_in_num = din,
        .mck_io_num = I2S_PIN_NO_CHANGE
    };
    i2s_set_pin(port, &pin_config);
    i2s_zero_dma_buffer(port);
}

// === GPIO Matrix Switching ===
void remap_i2s_input(int gpio_num) {
    gpio_set_direction(gpio_num, GPIO_MODE_INPUT);
    gpio_iomux_in(gpio_num, I2S0I_DATA_IN0_IDX);
}

// === Task: Read Mic1 dan Mic3 ===
void read_mic13_task(void *arg) {
    size_t bytes_read;
    while (1) {
        // === Mic1 ===
        remap_i2s_input(MIC1_SD);
        uint64_t t0_1 = esp_timer_get_time();
        i2s_read(I2S_NUM_0, mic1_buf, sizeof(mic1_buf), &bytes_read, portMAX_DELAY);
        int peak = 0, idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            float raw = (float)(mic1_buf[i] >> 14);
            float filtered = apply_fir(raw, fir_buf1, &fir_idx1);
            int amp = fabs(filtered);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak1 = peak;
        ts1 = t0_1 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);

        // === Mic3 ===
        remap_i2s_input(MIC3_SD);
        uint64_t t0_3 = esp_timer_get_time();
        i2s_read(I2S_NUM_0, mic3_buf, sizeof(mic3_buf), &bytes_read, portMAX_DELAY);
        peak = 0; idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            float raw = (float)(mic3_buf[i] >> 14);
            float filtered = apply_fir(raw, fir_buf3, &fir_idx3);
            int amp = fabs(filtered);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak3 = peak;
        ts3 = t0_3 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);
    }
}

// === Task: Read Mic2 ===
void read_mic2_task(void *arg) {
    size_t bytes_read;
    while (1) {
        uint64_t t0 = esp_timer_get_time();
        i2s_read(I2S_NUM_1, mic2_buf, sizeof(mic2_buf), &bytes_read, portMAX_DELAY);
        int peak = 0, idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            float raw = (float)(mic2_buf[i] >> 14);
            float filtered = apply_fir(raw, fir_buf2, &fir_idx2);
            int amp = fabs(filtered);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak2 = peak;
        ts2 = t0 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);
    }
}

// === Task Monitoring + Prediksi Lokasi ===
void monitor_task(void *arg) {
    while (1) {
        int64_t dt12 = (int64_t)(ts2 - ts1);
        int64_t dt13 = (int64_t)(ts3 - ts1);

        const char* prediksi_lokasi;
        if (ts1 <= ts2 && ts1 <= ts3) {
            prediksi_lokasi = "DEKAT MIC1";
        } else if (ts2 <= ts1 && ts2 <= ts3) {
            prediksi_lokasi = "DEKAT MIC2";
        } else {
            prediksi_lokasi = "DEKAT MIC3";
        }

        printf("Mic1: Peak=%d @ %llu µs | Mic2: Peak=%d @ %llu µs | Mic3: Peak=%d @ %llu µs | ΔM1-M2: %lld µs | ΔM1-M3: %lld µs | %s\n",
               peak1, ts1, peak2, ts2, peak3, ts3, dt12, dt13, prediksi_lokasi);

        vTaskDelay(pdMS_TO_TICKS(300));
    }
}

// === MAIN ===
void app_main() {
    init_i2s(I2S_NUM_0, MIC13_SCK, MIC13_WS, MIC1_SD);
    init_i2s(I2S_NUM_1, MIC2_SCK, MIC2_WS, MIC2_SD);

    xTaskCreatePinnedToCore(read_mic13_task, "mic13", 4096, NULL, 1, NULL, 0);
    xTaskCreatePinnedToCore(read_mic2_task, "mic2", 4096, NULL, 1, NULL, 1);
    xTaskCreate(monitor_task, "monitor", 4096, NULL, 1, NULL);
}
