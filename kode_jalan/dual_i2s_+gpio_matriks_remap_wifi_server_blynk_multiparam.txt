#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/i2s.h"
#include "esp_timer.h"
#include "driver/gpio.h"
#include "esp_log.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_http_client.h"
#include "soc/gpio_sig_map.h"
#include "hal/gpio_hal.h"

// === Konfigurasi Umum ===
#define SAMPLE_RATE     96000
#define I2S_READ_LEN    256

// === Konfigurasi WIFI ===
#define WIFI_SSID       "HoYo"
#define WIFI_PASS       "JaYONaEcelyo"

// === Token Blynk ===
#define BLYNK_TOKEN     "fFwjrznSFlQxXlagrI0IbkZgCmy1yIuj"
#define SEND_THRESHOLD  500

// === I2S Pin Mic1 / Mic3 (I2S_NUM_0) ===
#define MIC13_WS        25
#define MIC13_SCK       26
#define MIC1_SD         22
#define MIC3_SD         32

// === I2S Pin Mic2 (I2S_NUM_1) ===
#define MIC2_WS         27
#define MIC2_SCK        14
#define MIC2_SD         33

int32_t mic1_buf[I2S_READ_LEN], mic2_buf[I2S_READ_LEN], mic3_buf[I2S_READ_LEN];
volatile int peak1 = 0, peak2 = 0, peak3 = 0;
volatile uint64_t ts1 = 0, ts2 = 0, ts3 = 0;

// === Init I2S ===
void init_i2s(i2s_port_t port, int bck, int ws, int din) {
    i2s_config_t config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_RX,
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        .communication_format = I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 4,
        .dma_buf_len = 64,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };
    i2s_driver_install(port, &config, 0, NULL);

    i2s_pin_config_t pin_config = {
        .bck_io_num = bck,
        .ws_io_num = ws,
        .data_out_num = I2S_PIN_NO_CHANGE,
        .data_in_num = din,
        .mck_io_num = I2S_PIN_NO_CHANGE
    };
    i2s_set_pin(port, &pin_config);
    i2s_zero_dma_buffer(port);
}

void remap_i2s_input(int gpio_num) {
    gpio_set_direction(gpio_num, GPIO_MODE_INPUT);
    gpio_iomux_in(gpio_num, I2S0I_DATA_IN0_IDX);
}

void wifi_init() {
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASS,
        },
    };
    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config);
    esp_wifi_start();
    esp_wifi_connect();

    ESP_LOGI("wifi", "Connecting to WiFi...");
    vTaskDelay(5000 / portTICK_PERIOD_MS);  // Tunggu IP
}

void send_http_post(int p1, int p2, int p3, uint64_t t1, uint64_t t2, uint64_t t3) {
    char url[512];
    snprintf(url, sizeof(url),
        "http://blynk.cloud/external/api/update?token=%s&V0=%d&V1=%llu&V2=%d&V3=%llu&V4=%d&V5=%llu",
        BLYNK_TOKEN, p1, t1, p2, t2, p3, t3);

    esp_http_client_config_t config = {
        .url = url,
        .method = HTTP_METHOD_GET,
    };

    esp_http_client_handle_t client = esp_http_client_init(&config);
    if (client == NULL) {
        ESP_LOGE("HTTP", "Failed to initialize client");
        return;
    }

    esp_err_t err = esp_http_client_perform(client);
    if (err == ESP_OK) {
        ESP_LOGI("HTTP", "✅ Data terkirim ke Blynk");
    } else {
        ESP_LOGE("HTTP", "❌ Gagal kirim ke Blynk: %s", esp_err_to_name(err));
    }
    esp_http_client_cleanup(client);
}

void read_mic13_task(void *arg) {
    size_t bytes_read;
    while (1) {
        remap_i2s_input(MIC1_SD);
        uint64_t t0_1 = esp_timer_get_time();
        i2s_read(I2S_NUM_0, mic1_buf, sizeof(mic1_buf), &bytes_read, portMAX_DELAY);
        int peak = 0, idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            int amp = abs(mic1_buf[i] >> 14);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak1 = peak;
        ts1 = t0_1 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);

        remap_i2s_input(MIC3_SD);
        uint64_t t0_3 = esp_timer_get_time();
        i2s_read(I2S_NUM_0, mic3_buf, sizeof(mic3_buf), &bytes_read, portMAX_DELAY);
        peak = 0; idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            int amp = abs(mic3_buf[i] >> 14);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak3 = peak;
        ts3 = t0_3 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);
    }
}

void read_mic2_and_post_task(void *arg) {
    size_t bytes_read;
    while (1) {
        uint64_t t0 = esp_timer_get_time();
        i2s_read(I2S_NUM_1, mic2_buf, sizeof(mic2_buf), &bytes_read, portMAX_DELAY);
        int peak = 0, idx = 0;
        for (int i = 0; i < I2S_READ_LEN; i++) {
            int amp = abs(mic2_buf[i] >> 14);
            if (amp > peak) { peak = amp; idx = i; }
        }
        peak2 = peak;
        ts2 = t0 + ((uint64_t)idx * 1000000ULL / SAMPLE_RATE);

        if (peak1 > SEND_THRESHOLD || peak2 > SEND_THRESHOLD || peak3 > SEND_THRESHOLD) {
            send_http_post(peak1, peak2, peak3, ts1, ts2, ts3);
        }
    }
}

void app_main() {
    nvs_flash_init();
    wifi_init();
    init_i2s(I2S_NUM_0, MIC13_SCK, MIC13_WS, MIC1_SD);
    init_i2s(I2S_NUM_1, MIC2_SCK, MIC2_WS, MIC2_SD);

    xTaskCreatePinnedToCore(read_mic13_task, "mic13", 4096, NULL, 1, NULL, 1);
    xTaskCreatePinnedToCore(read_mic2_and_post_task, "mic2_post", 8192, NULL, 1, NULL, 0);
}